/* tslint:disable */
/* eslint-disable */
/*
Team API


The team API lets you manage users, departments, locations, and cards.


The version of the OpenAPI document: 1.0
Contact: developer-access@brex.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Card } from '../models';
// @ts-ignore
import { CardMailingAddress } from '../models';
// @ts-ignore
import { CardNumberResponse } from '../models';
// @ts-ignore
import { CardOwner } from '../models';
// @ts-ignore
import { CardType } from '../models';
// @ts-ignore
import { ChangeCardReason } from '../models';
// @ts-ignore
import { CreateCardRequest } from '../models';
// @ts-ignore
import { CreateCardRequestCardAttributePreferences } from '../models';
// @ts-ignore
import { CreateCardRequestSpendControls } from '../models';
// @ts-ignore
import { LimitType } from '../models';
// @ts-ignore
import { LockCardRequest } from '../models';
// @ts-ignore
import { PageCard } from '../models';
// @ts-ignore
import { SecureEmailForCardDetailsRequest } from '../models';
// @ts-ignore
import { TerminateCardRequest } from '../models';
// @ts-ignore
import { UpdateCardRequest } from '../models';
// @ts-ignore
import { UpdateCardRequestSpendControls } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CardsApi - axios parameter creator
 * @export
 */
export const CardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  Creates a new card. The `spend_controls` field is required when `limit_type` = `CARD`. The `mailing_address` field is required for physical cards and is the shipping address used to send the card; it is not the same as the billing and mailing address used for online purchases. The first 2 lines of this address must be under 60 characters long. Each user can only have up to 10 active physical cards. For Empower accounts, this endpoint requires budget management. If your account does not have access to budget management features, a 403 response status will be returned.  If this is the case and you want to gain access to this endpoint, please contact Brex support. 
         * @summary  Create card 
         * @param {string} idempotencyKey 
         * @param {CreateCardRequest} createCardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCard: async (idempotencyKey: string, createCardRequest: CreateCardRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idempotencyKey' is not null or undefined
            assertParamExists('createNewCard', 'idempotencyKey', idempotencyKey)
            // verify required parameter 'createCardRequest' is not null or undefined
            assertParamExists('createNewCard', 'createCardRequest', createCardRequest)
            const localVarPath = `/v2/cards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["cards"], configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createCardRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/cards',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createCardRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Creates a secure email to send card number, CVV, and expiration date of a card by ID to the specified email.  This endpoint is currently gated. If you would like to request access, please reach out to developer-access@brex.com 
         * @summary  Create secure email to send card number  
         * @param {string} id 
         * @param {string} idempotencyKey 
         * @param {SecureEmailForCardDetailsRequest} secureEmailForCardDetailsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSecureEmail: async (id: string, idempotencyKey: string, secureEmailForCardDetailsRequest: SecureEmailForCardDetailsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createSecureEmail', 'id', id)
            // verify required parameter 'idempotencyKey' is not null or undefined
            assertParamExists('createSecureEmail', 'idempotencyKey', idempotencyKey)
            // verify required parameter 'secureEmailForCardDetailsRequest' is not null or undefined
            assertParamExists('createSecureEmail', 'secureEmailForCardDetailsRequest', secureEmailForCardDetailsRequest)
            const localVarPath = `/v2/cards/{id}/secure_email`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["cards.pan"], configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: secureEmailForCardDetailsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/cards/{id}/secure_email',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(secureEmailForCardDetailsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Retrieves a card by ID. Only cards with `limit_type = CARD` have `spend_controls` 
         * @summary  Get card 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/v2/cards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["cards", "cards.readonly"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/cards/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Retrieves card number, CVV, and expiration date of a card by ID. 
         * @summary  Get card number 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardDetails: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCardDetails', 'id', id)
            const localVarPath = `/v2/cards/{id}/pan`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["cards.pan"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/cards/{id}/pan',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Lists all cards by a `user_id`. Only cards with `limit_type = CARD` have `spend_controls` 
         * @summary  List cards 
         * @param {string} [userId] 
         * @param {string} [cursor] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByUserId: async (userId?: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/cards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["cards.readonly", "cards"], configuration)
            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/cards',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Locks an existing, unlocked card. And the card owner will receive a notification about it. 
         * @summary  Lock card 
         * @param {string} id 
         * @param {LockCardRequest} lockCardRequest 
         * @param {string} [idempotencyKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lockCard: async (id: string, lockCardRequest: LockCardRequest, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('lockCard', 'id', id)
            // verify required parameter 'lockCardRequest' is not null or undefined
            assertParamExists('lockCard', 'lockCardRequest', lockCardRequest)
            const localVarPath = `/v2/cards/{id}/lock`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["cards"], configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: lockCardRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/cards/{id}/lock',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(lockCardRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Terminates an existing card. The card owner will receive a notification about it. 
         * @summary  Terminate card 
         * @param {string} id 
         * @param {TerminateCardRequest} terminateCardRequest 
         * @param {string} [idempotencyKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateExistingCard: async (id: string, terminateCardRequest: TerminateCardRequest, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('terminateExistingCard', 'id', id)
            // verify required parameter 'terminateCardRequest' is not null or undefined
            assertParamExists('terminateExistingCard', 'terminateCardRequest', terminateCardRequest)
            const localVarPath = `/v2/cards/{id}/terminate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["cards"], configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: terminateCardRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/cards/{id}/terminate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(terminateCardRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Unlocks an existing card. 
         * @summary  Unlock card 
         * @param {string} id 
         * @param {string} [idempotencyKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlockExistingCard: async (id: string, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unlockExistingCard', 'id', id)
            const localVarPath = `/v2/cards/{id}/unlock`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["cards"], configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/cards/{id}/unlock',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Update an existing vendor card 
         * @summary  Update card 
         * @param {string} id 
         * @param {UpdateCardRequest} updateCardRequest 
         * @param {string} [idempotencyKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCard: async (id: string, updateCardRequest: UpdateCardRequest, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCard', 'id', id)
            // verify required parameter 'updateCardRequest' is not null or undefined
            assertParamExists('updateCard', 'updateCardRequest', updateCardRequest)
            const localVarPath = `/v2/cards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["cards"], configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateCardRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/cards/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateCardRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardsApi - functional programming interface
 * @export
 */
export const CardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardsApiAxiosParamCreator(configuration)
    return {
        /**
         *  Creates a new card. The `spend_controls` field is required when `limit_type` = `CARD`. The `mailing_address` field is required for physical cards and is the shipping address used to send the card; it is not the same as the billing and mailing address used for online purchases. The first 2 lines of this address must be under 60 characters long. Each user can only have up to 10 active physical cards. For Empower accounts, this endpoint requires budget management. If your account does not have access to budget management features, a 403 response status will be returned.  If this is the case and you want to gain access to this endpoint, please contact Brex support. 
         * @summary  Create card 
         * @param {CardsApiCreateNewCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewCard(requestParameters: CardsApiCreateNewCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Card>> {
            const createCardRequest: CreateCardRequest = {
                owner: requestParameters.owner,
                card_name: requestParameters.card_name,
                card_type: requestParameters.card_type,
                limit_type: requestParameters.limit_type,
                spend_controls: requestParameters.spend_controls,
                mailing_address: requestParameters.mailing_address,
                metadata: requestParameters.metadata,
                card_attribute_preferences: requestParameters.card_attribute_preferences
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewCard(requestParameters.idempotencyKey, createCardRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Creates a secure email to send card number, CVV, and expiration date of a card by ID to the specified email.  This endpoint is currently gated. If you would like to request access, please reach out to developer-access@brex.com 
         * @summary  Create secure email to send card number  
         * @param {CardsApiCreateSecureEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSecureEmail(requestParameters: CardsApiCreateSecureEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const secureEmailForCardDetailsRequest: SecureEmailForCardDetailsRequest = {
                recipient_email: requestParameters.recipient_email,
                sender_name: requestParameters.sender_name,
                message: requestParameters.message,
                expiry_days: requestParameters.expiry_days
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSecureEmail(requestParameters.id, requestParameters.idempotencyKey, secureEmailForCardDetailsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Retrieves a card by ID. Only cards with `limit_type = CARD` have `spend_controls` 
         * @summary  Get card 
         * @param {CardsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: CardsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Card>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Retrieves card number, CVV, and expiration date of a card by ID. 
         * @summary  Get card number 
         * @param {CardsApiGetCardDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardDetails(requestParameters: CardsApiGetCardDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardNumberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardDetails(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Lists all cards by a `user_id`. Only cards with `limit_type = CARD` have `spend_controls` 
         * @summary  List cards 
         * @param {CardsApiListByUserIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByUserId(requestParameters: CardsApiListByUserIdRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByUserId(requestParameters.userId, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Locks an existing, unlocked card. And the card owner will receive a notification about it. 
         * @summary  Lock card 
         * @param {CardsApiLockCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lockCard(requestParameters: CardsApiLockCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Card>> {
            const lockCardRequest: LockCardRequest = {
                description: requestParameters.description,
                reason: requestParameters.reason
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.lockCard(requestParameters.id, lockCardRequest, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Terminates an existing card. The card owner will receive a notification about it. 
         * @summary  Terminate card 
         * @param {CardsApiTerminateExistingCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async terminateExistingCard(requestParameters: CardsApiTerminateExistingCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Card>> {
            const terminateCardRequest: TerminateCardRequest = {
                description: requestParameters.description,
                reason: requestParameters.reason
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.terminateExistingCard(requestParameters.id, terminateCardRequest, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Unlocks an existing card. 
         * @summary  Unlock card 
         * @param {CardsApiUnlockExistingCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlockExistingCard(requestParameters: CardsApiUnlockExistingCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Card>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlockExistingCard(requestParameters.id, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Update an existing vendor card 
         * @summary  Update card 
         * @param {CardsApiUpdateCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCard(requestParameters: CardsApiUpdateCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Card>> {
            const updateCardRequest: UpdateCardRequest = {
                spend_controls: requestParameters.spend_controls,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCard(requestParameters.id, updateCardRequest, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CardsApi - factory interface
 * @export
 */
export const CardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardsApiFp(configuration)
    return {
        /**
         *  Creates a new card. The `spend_controls` field is required when `limit_type` = `CARD`. The `mailing_address` field is required for physical cards and is the shipping address used to send the card; it is not the same as the billing and mailing address used for online purchases. The first 2 lines of this address must be under 60 characters long. Each user can only have up to 10 active physical cards. For Empower accounts, this endpoint requires budget management. If your account does not have access to budget management features, a 403 response status will be returned.  If this is the case and you want to gain access to this endpoint, please contact Brex support. 
         * @summary  Create card 
         * @param {CardsApiCreateNewCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCard(requestParameters: CardsApiCreateNewCardRequest, options?: AxiosRequestConfig): AxiosPromise<Card> {
            return localVarFp.createNewCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Creates a secure email to send card number, CVV, and expiration date of a card by ID to the specified email.  This endpoint is currently gated. If you would like to request access, please reach out to developer-access@brex.com 
         * @summary  Create secure email to send card number  
         * @param {CardsApiCreateSecureEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSecureEmail(requestParameters: CardsApiCreateSecureEmailRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createSecureEmail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Retrieves a card by ID. Only cards with `limit_type = CARD` have `spend_controls` 
         * @summary  Get card 
         * @param {CardsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: CardsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Card> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Retrieves card number, CVV, and expiration date of a card by ID. 
         * @summary  Get card number 
         * @param {CardsApiGetCardDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardDetails(requestParameters: CardsApiGetCardDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<CardNumberResponse> {
            return localVarFp.getCardDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Lists all cards by a `user_id`. Only cards with `limit_type = CARD` have `spend_controls` 
         * @summary  List cards 
         * @param {CardsApiListByUserIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByUserId(requestParameters: CardsApiListByUserIdRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PageCard> {
            return localVarFp.listByUserId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Locks an existing, unlocked card. And the card owner will receive a notification about it. 
         * @summary  Lock card 
         * @param {CardsApiLockCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lockCard(requestParameters: CardsApiLockCardRequest, options?: AxiosRequestConfig): AxiosPromise<Card> {
            return localVarFp.lockCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Terminates an existing card. The card owner will receive a notification about it. 
         * @summary  Terminate card 
         * @param {CardsApiTerminateExistingCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateExistingCard(requestParameters: CardsApiTerminateExistingCardRequest, options?: AxiosRequestConfig): AxiosPromise<Card> {
            return localVarFp.terminateExistingCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Unlocks an existing card. 
         * @summary  Unlock card 
         * @param {CardsApiUnlockExistingCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlockExistingCard(requestParameters: CardsApiUnlockExistingCardRequest, options?: AxiosRequestConfig): AxiosPromise<Card> {
            return localVarFp.unlockExistingCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Update an existing vendor card 
         * @summary  Update card 
         * @param {CardsApiUpdateCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCard(requestParameters: CardsApiUpdateCardRequest, options?: AxiosRequestConfig): AxiosPromise<Card> {
            return localVarFp.updateCard(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewCard operation in CardsApi.
 * @export
 * @interface CardsApiCreateNewCardRequest
 */
export type CardsApiCreateNewCardRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CardsApiCreateNewCard
    */
    readonly idempotencyKey: string
    
} & CreateCardRequest

/**
 * Request parameters for createSecureEmail operation in CardsApi.
 * @export
 * @interface CardsApiCreateSecureEmailRequest
 */
export type CardsApiCreateSecureEmailRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CardsApiCreateSecureEmail
    */
    readonly id: string
    
    /**
    * 
    * @type {string}
    * @memberof CardsApiCreateSecureEmail
    */
    readonly idempotencyKey: string
    
} & SecureEmailForCardDetailsRequest

/**
 * Request parameters for getById operation in CardsApi.
 * @export
 * @interface CardsApiGetByIdRequest
 */
export type CardsApiGetByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CardsApiGetById
    */
    readonly id: string
    
}

/**
 * Request parameters for getCardDetails operation in CardsApi.
 * @export
 * @interface CardsApiGetCardDetailsRequest
 */
export type CardsApiGetCardDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CardsApiGetCardDetails
    */
    readonly id: string
    
}

/**
 * Request parameters for listByUserId operation in CardsApi.
 * @export
 * @interface CardsApiListByUserIdRequest
 */
export type CardsApiListByUserIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CardsApiListByUserId
    */
    readonly userId?: string
    
    /**
    * 
    * @type {string}
    * @memberof CardsApiListByUserId
    */
    readonly cursor?: string
    
    /**
    * 
    * @type {number}
    * @memberof CardsApiListByUserId
    */
    readonly limit?: number
    
}

/**
 * Request parameters for lockCard operation in CardsApi.
 * @export
 * @interface CardsApiLockCardRequest
 */
export type CardsApiLockCardRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CardsApiLockCard
    */
    readonly id: string
    
    /**
    * 
    * @type {string}
    * @memberof CardsApiLockCard
    */
    readonly idempotencyKey?: string
    
} & LockCardRequest

/**
 * Request parameters for terminateExistingCard operation in CardsApi.
 * @export
 * @interface CardsApiTerminateExistingCardRequest
 */
export type CardsApiTerminateExistingCardRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CardsApiTerminateExistingCard
    */
    readonly id: string
    
    /**
    * 
    * @type {string}
    * @memberof CardsApiTerminateExistingCard
    */
    readonly idempotencyKey?: string
    
} & TerminateCardRequest

/**
 * Request parameters for unlockExistingCard operation in CardsApi.
 * @export
 * @interface CardsApiUnlockExistingCardRequest
 */
export type CardsApiUnlockExistingCardRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CardsApiUnlockExistingCard
    */
    readonly id: string
    
    /**
    * 
    * @type {string}
    * @memberof CardsApiUnlockExistingCard
    */
    readonly idempotencyKey?: string
    
}

/**
 * Request parameters for updateCard operation in CardsApi.
 * @export
 * @interface CardsApiUpdateCardRequest
 */
export type CardsApiUpdateCardRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CardsApiUpdateCard
    */
    readonly id: string
    
    /**
    * 
    * @type {string}
    * @memberof CardsApiUpdateCard
    */
    readonly idempotencyKey?: string
    
} & UpdateCardRequest

/**
 * CardsApiGenerated - object-oriented interface
 * @export
 * @class CardsApiGenerated
 * @extends {BaseAPI}
 */
export class CardsApiGenerated extends BaseAPI {
    /**
     *  Creates a new card. The `spend_controls` field is required when `limit_type` = `CARD`. The `mailing_address` field is required for physical cards and is the shipping address used to send the card; it is not the same as the billing and mailing address used for online purchases. The first 2 lines of this address must be under 60 characters long. Each user can only have up to 10 active physical cards. For Empower accounts, this endpoint requires budget management. If your account does not have access to budget management features, a 403 response status will be returned.  If this is the case and you want to gain access to this endpoint, please contact Brex support. 
     * @summary  Create card 
     * @param {CardsApiCreateNewCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApiGenerated
     */
    public createNewCard(requestParameters: CardsApiCreateNewCardRequest, options?: AxiosRequestConfig) {
        return CardsApiFp(this.configuration).createNewCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Creates a secure email to send card number, CVV, and expiration date of a card by ID to the specified email.  This endpoint is currently gated. If you would like to request access, please reach out to developer-access@brex.com 
     * @summary  Create secure email to send card number  
     * @param {CardsApiCreateSecureEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApiGenerated
     */
    public createSecureEmail(requestParameters: CardsApiCreateSecureEmailRequest, options?: AxiosRequestConfig) {
        return CardsApiFp(this.configuration).createSecureEmail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Retrieves a card by ID. Only cards with `limit_type = CARD` have `spend_controls` 
     * @summary  Get card 
     * @param {CardsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApiGenerated
     */
    public getById(requestParameters: CardsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return CardsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Retrieves card number, CVV, and expiration date of a card by ID. 
     * @summary  Get card number 
     * @param {CardsApiGetCardDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApiGenerated
     */
    public getCardDetails(requestParameters: CardsApiGetCardDetailsRequest, options?: AxiosRequestConfig) {
        return CardsApiFp(this.configuration).getCardDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Lists all cards by a `user_id`. Only cards with `limit_type = CARD` have `spend_controls` 
     * @summary  List cards 
     * @param {CardsApiListByUserIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApiGenerated
     */
    public listByUserId(requestParameters: CardsApiListByUserIdRequest = {}, options?: AxiosRequestConfig) {
        return CardsApiFp(this.configuration).listByUserId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Locks an existing, unlocked card. And the card owner will receive a notification about it. 
     * @summary  Lock card 
     * @param {CardsApiLockCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApiGenerated
     */
    public lockCard(requestParameters: CardsApiLockCardRequest, options?: AxiosRequestConfig) {
        return CardsApiFp(this.configuration).lockCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Terminates an existing card. The card owner will receive a notification about it. 
     * @summary  Terminate card 
     * @param {CardsApiTerminateExistingCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApiGenerated
     */
    public terminateExistingCard(requestParameters: CardsApiTerminateExistingCardRequest, options?: AxiosRequestConfig) {
        return CardsApiFp(this.configuration).terminateExistingCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Unlocks an existing card. 
     * @summary  Unlock card 
     * @param {CardsApiUnlockExistingCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApiGenerated
     */
    public unlockExistingCard(requestParameters: CardsApiUnlockExistingCardRequest, options?: AxiosRequestConfig) {
        return CardsApiFp(this.configuration).unlockExistingCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Update an existing vendor card 
     * @summary  Update card 
     * @param {CardsApiUpdateCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApiGenerated
     */
    public updateCard(requestParameters: CardsApiUpdateCardRequest, options?: AxiosRequestConfig) {
        return CardsApiFp(this.configuration).updateCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
