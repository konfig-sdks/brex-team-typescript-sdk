/* tslint:disable */
/* eslint-disable */
/*
Team API


The team API lets you manage users, departments, locations, and cards.


The version of the OpenAPI document: 1.0
Contact: developer-access@brex.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateLocationRequest } from '../models';
// @ts-ignore
import { LocationResponse } from '../models';
// @ts-ignore
import { PageLocationResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LocationsApi - axios parameter creator
 * @export
 */
export const LocationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  This endpoint creates a new location. 
         * @summary  Create location 
         * @param {CreateLocationRequest} createLocationRequest 
         * @param {string} [idempotencyKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewLocation: async (createLocationRequest: CreateLocationRequest, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createLocationRequest' is not null or undefined
            assertParamExists('addNewLocation', 'createLocationRequest', createLocationRequest)
            const localVarPath = `/v2/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["locations"], configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createLocationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/locations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createLocationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint lists all locations. 
         * @summary  List locations 
         * @param {string} [cursor] 
         * @param {number} [limit] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLocations: async (cursor?: string, limit?: number, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["locations", "locations.readonly"], configuration)
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/locations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint gets a location by ID. 
         * @summary  Get location 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLocationById', 'id', id)
            const localVarPath = `/v2/locations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["locations", "locations.readonly"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/locations/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationsApi - functional programming interface
 * @export
 */
export const LocationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationsApiAxiosParamCreator(configuration)
    return {
        /**
         *  This endpoint creates a new location. 
         * @summary  Create location 
         * @param {LocationsApiAddNewLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewLocation(requestParameters: LocationsApiAddNewLocationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationResponse>> {
            const createLocationRequest: CreateLocationRequest = {
                description: requestParameters.description,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewLocation(createLocationRequest, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  This endpoint lists all locations. 
         * @summary  List locations 
         * @param {LocationsApiGetAllLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllLocations(requestParameters: LocationsApiGetAllLocationsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageLocationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllLocations(requestParameters.cursor, requestParameters.limit, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  This endpoint gets a location by ID. 
         * @summary  Get location 
         * @param {LocationsApiGetLocationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocationById(requestParameters: LocationsApiGetLocationByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocationById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocationsApi - factory interface
 * @export
 */
export const LocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationsApiFp(configuration)
    return {
        /**
         *  This endpoint creates a new location. 
         * @summary  Create location 
         * @param {LocationsApiAddNewLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewLocation(requestParameters: LocationsApiAddNewLocationRequest, options?: AxiosRequestConfig): AxiosPromise<LocationResponse> {
            return localVarFp.addNewLocation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  This endpoint lists all locations. 
         * @summary  List locations 
         * @param {LocationsApiGetAllLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLocations(requestParameters: LocationsApiGetAllLocationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PageLocationResponse> {
            return localVarFp.getAllLocations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  This endpoint gets a location by ID. 
         * @summary  Get location 
         * @param {LocationsApiGetLocationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationById(requestParameters: LocationsApiGetLocationByIdRequest, options?: AxiosRequestConfig): AxiosPromise<LocationResponse> {
            return localVarFp.getLocationById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewLocation operation in LocationsApi.
 * @export
 * @interface LocationsApiAddNewLocationRequest
 */
export type LocationsApiAddNewLocationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof LocationsApiAddNewLocation
    */
    readonly idempotencyKey?: string
    
} & CreateLocationRequest

/**
 * Request parameters for getAllLocations operation in LocationsApi.
 * @export
 * @interface LocationsApiGetAllLocationsRequest
 */
export type LocationsApiGetAllLocationsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof LocationsApiGetAllLocations
    */
    readonly cursor?: string
    
    /**
    * 
    * @type {number}
    * @memberof LocationsApiGetAllLocations
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof LocationsApiGetAllLocations
    */
    readonly name?: string
    
}

/**
 * Request parameters for getLocationById operation in LocationsApi.
 * @export
 * @interface LocationsApiGetLocationByIdRequest
 */
export type LocationsApiGetLocationByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof LocationsApiGetLocationById
    */
    readonly id: string
    
}

/**
 * LocationsApiGenerated - object-oriented interface
 * @export
 * @class LocationsApiGenerated
 * @extends {BaseAPI}
 */
export class LocationsApiGenerated extends BaseAPI {
    /**
     *  This endpoint creates a new location. 
     * @summary  Create location 
     * @param {LocationsApiAddNewLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiGenerated
     */
    public addNewLocation(requestParameters: LocationsApiAddNewLocationRequest, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).addNewLocation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  This endpoint lists all locations. 
     * @summary  List locations 
     * @param {LocationsApiGetAllLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiGenerated
     */
    public getAllLocations(requestParameters: LocationsApiGetAllLocationsRequest = {}, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).getAllLocations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  This endpoint gets a location by ID. 
     * @summary  Get location 
     * @param {LocationsApiGetLocationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiGenerated
     */
    public getLocationById(requestParameters: LocationsApiGetLocationByIdRequest, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).getLocationById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
