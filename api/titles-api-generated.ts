/* tslint:disable */
/* eslint-disable */
/*
Team API


The team API lets you manage users, departments, locations, and cards.


The version of the OpenAPI document: 1.0
Contact: developer-access@brex.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateTitleRequest } from '../models';
// @ts-ignore
import { PageTitleResponse } from '../models';
// @ts-ignore
import { TitleResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TitlesApi - axios parameter creator
 * @export
 */
export const TitlesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  This endpoint creates a new title 
         * @summary  Create title 
         * @param {CreateTitleRequest} createTitleRequest 
         * @param {string} [idempotencyKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTitle: async (createTitleRequest: CreateTitleRequest, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTitleRequest' is not null or undefined
            assertParamExists('createNewTitle', 'createTitleRequest', createTitleRequest)
            const localVarPath = `/v2/titles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["titles"], configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createTitleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/titles',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createTitleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint lists all titles. 
         * @summary  List titles 
         * @param {string} [cursor] 
         * @param {number} [limit] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (cursor?: string, limit?: number, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/titles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["titles", "titles.readonly"], configuration)
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/titles',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint gets a title by ID. 
         * @summary  Get title 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTitleById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTitleById', 'id', id)
            const localVarPath = `/v2/titles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["titles", "titles.readonly"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/titles/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TitlesApi - functional programming interface
 * @export
 */
export const TitlesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TitlesApiAxiosParamCreator(configuration)
    return {
        /**
         *  This endpoint creates a new title 
         * @summary  Create title 
         * @param {TitlesApiCreateNewTitleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewTitle(requestParameters: TitlesApiCreateNewTitleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TitleResponse>> {
            const createTitleRequest: CreateTitleRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewTitle(createTitleRequest, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  This endpoint lists all titles. 
         * @summary  List titles 
         * @param {TitlesApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: TitlesApiGetAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageTitleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.cursor, requestParameters.limit, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  This endpoint gets a title by ID. 
         * @summary  Get title 
         * @param {TitlesApiGetTitleByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTitleById(requestParameters: TitlesApiGetTitleByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TitleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTitleById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TitlesApi - factory interface
 * @export
 */
export const TitlesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TitlesApiFp(configuration)
    return {
        /**
         *  This endpoint creates a new title 
         * @summary  Create title 
         * @param {TitlesApiCreateNewTitleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTitle(requestParameters: TitlesApiCreateNewTitleRequest, options?: AxiosRequestConfig): AxiosPromise<TitleResponse> {
            return localVarFp.createNewTitle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  This endpoint lists all titles. 
         * @summary  List titles 
         * @param {TitlesApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: TitlesApiGetAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PageTitleResponse> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  This endpoint gets a title by ID. 
         * @summary  Get title 
         * @param {TitlesApiGetTitleByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTitleById(requestParameters: TitlesApiGetTitleByIdRequest, options?: AxiosRequestConfig): AxiosPromise<TitleResponse> {
            return localVarFp.getTitleById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewTitle operation in TitlesApi.
 * @export
 * @interface TitlesApiCreateNewTitleRequest
 */
export type TitlesApiCreateNewTitleRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TitlesApiCreateNewTitle
    */
    readonly idempotencyKey?: string
    
} & CreateTitleRequest

/**
 * Request parameters for getAll operation in TitlesApi.
 * @export
 * @interface TitlesApiGetAllRequest
 */
export type TitlesApiGetAllRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TitlesApiGetAll
    */
    readonly cursor?: string
    
    /**
    * 
    * @type {number}
    * @memberof TitlesApiGetAll
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof TitlesApiGetAll
    */
    readonly name?: string
    
}

/**
 * Request parameters for getTitleById operation in TitlesApi.
 * @export
 * @interface TitlesApiGetTitleByIdRequest
 */
export type TitlesApiGetTitleByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TitlesApiGetTitleById
    */
    readonly id: string
    
}

/**
 * TitlesApiGenerated - object-oriented interface
 * @export
 * @class TitlesApiGenerated
 * @extends {BaseAPI}
 */
export class TitlesApiGenerated extends BaseAPI {
    /**
     *  This endpoint creates a new title 
     * @summary  Create title 
     * @param {TitlesApiCreateNewTitleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitlesApiGenerated
     */
    public createNewTitle(requestParameters: TitlesApiCreateNewTitleRequest, options?: AxiosRequestConfig) {
        return TitlesApiFp(this.configuration).createNewTitle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  This endpoint lists all titles. 
     * @summary  List titles 
     * @param {TitlesApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitlesApiGenerated
     */
    public getAll(requestParameters: TitlesApiGetAllRequest = {}, options?: AxiosRequestConfig) {
        return TitlesApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  This endpoint gets a title by ID. 
     * @summary  Get title 
     * @param {TitlesApiGetTitleByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitlesApiGenerated
     */
    public getTitleById(requestParameters: TitlesApiGetTitleByIdRequest, options?: AxiosRequestConfig) {
        return TitlesApiFp(this.configuration).getTitleById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
