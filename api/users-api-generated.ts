/* tslint:disable */
/* eslint-disable */
/*
Team API


The team API lets you manage users, departments, locations, and cards.


The version of the OpenAPI document: 1.0
Contact: developer-access@brex.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateUserRequest } from '../models';
// @ts-ignore
import { PageUserResponse } from '../models';
// @ts-ignore
import { SetUserLimitRequest } from '../models';
// @ts-ignore
import { SetUserLimitRequestMonthlyLimit } from '../models';
// @ts-ignore
import { UpdateUserRequest } from '../models';
// @ts-ignore
import { UpdateUserStatus } from '../models';
// @ts-ignore
import { UserLimitResponse } from '../models';
// @ts-ignore
import { UserResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  This endpoint returns the user associated with the OAuth2 access token. 
         * @summary  Get current user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["users", "users.readonly"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/users/me',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint gets the monthly limit for the user including the monthly available limit. 
         * @summary  Get limit for the user 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonthlyLimit: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMonthlyLimit', 'id', id)
            const localVarPath = `/v2/users/{id}/limit`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["users", "users.readonly"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/users/{id}/limit',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint gets a user by ID. 
         * @summary  Get user 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserById', 'id', id)
            const localVarPath = `/v2/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["users", "users.readonly"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/users/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint invites a new user as an employee. To update user\'s role, check out [this article](https://support.brex.com/how-do-i-change-another-user-s-role/). 
         * @summary  Invite user 
         * @param {CreateUserRequest} createUserRequest 
         * @param {string} [idempotencyKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteNewEmployee: async (createUserRequest: CreateUserRequest, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserRequest' is not null or undefined
            assertParamExists('inviteNewEmployee', 'createUserRequest', createUserRequest)
            const localVarPath = `/v2/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["users"], configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createUserRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/users',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createUserRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint lists all users. To find a user id by email, you can filter using the `email` query parameter. 
         * @summary  List users 
         * @param {string} [cursor] 
         * @param {number} [limit] 
         * @param {string} [email] 
         * @param {string} [remoteDisplayId] 
         * @param {Array<string>} [expand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (cursor?: string, limit?: number, email?: string, remoteDisplayId?: string, expand?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["users", "users.readonly"], configuration)
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (remoteDisplayId !== undefined) {
                localVarQueryParameter['remote_display_id'] = remoteDisplayId;
            }

            if (expand) {
                localVarQueryParameter['expand[]'] = expand;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint sets the monthly limit for a user.  The limit amount must be non-negative.  To unset the monthly limit of the user, just set `monthly_limit` to null. 
         * @summary  Set limit for the user 
         * @param {string} id 
         * @param {SetUserLimitRequest} setUserLimitRequest 
         * @param {string} [idempotencyKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMonthlyLimit: async (id: string, setUserLimitRequest: SetUserLimitRequest, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('setMonthlyLimit', 'id', id)
            // verify required parameter 'setUserLimitRequest' is not null or undefined
            assertParamExists('setMonthlyLimit', 'setUserLimitRequest', setUserLimitRequest)
            const localVarPath = `/v2/users/{id}/limit`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["users"], configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: setUserLimitRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/users/{id}/limit',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(setUserLimitRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint updates a user. Any parameters not provided will be left unchanged. 
         * @summary  Update user 
         * @param {string} id 
         * @param {UpdateUserRequest} updateUserRequest 
         * @param {string} [idempotencyKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (id: string, updateUserRequest: UpdateUserRequest, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            // verify required parameter 'updateUserRequest' is not null or undefined
            assertParamExists('updateUser', 'updateUserRequest', updateUserRequest)
            const localVarPath = `/v2/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["users"], configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateUserRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/users/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         *  This endpoint returns the user associated with the OAuth2 access token. 
         * @summary  Get current user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  This endpoint gets the monthly limit for the user including the monthly available limit. 
         * @summary  Get limit for the user 
         * @param {UsersApiGetMonthlyLimitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMonthlyLimit(requestParameters: UsersApiGetMonthlyLimitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserLimitResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMonthlyLimit(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  This endpoint gets a user by ID. 
         * @summary  Get user 
         * @param {UsersApiGetUserByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(requestParameters: UsersApiGetUserByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  This endpoint invites a new user as an employee. To update user\'s role, check out [this article](https://support.brex.com/how-do-i-change-another-user-s-role/). 
         * @summary  Invite user 
         * @param {UsersApiInviteNewEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteNewEmployee(requestParameters: UsersApiInviteNewEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const createUserRequest: CreateUserRequest = {
                first_name: requestParameters.first_name,
                last_name: requestParameters.last_name,
                email: requestParameters.email,
                manager_id: requestParameters.manager_id,
                department_id: requestParameters.department_id,
                location_id: requestParameters.location_id,
                title_id: requestParameters.title_id,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteNewEmployee(createUserRequest, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  This endpoint lists all users. To find a user id by email, you can filter using the `email` query parameter. 
         * @summary  List users 
         * @param {UsersApiListUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(requestParameters: UsersApiListUsersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(requestParameters.cursor, requestParameters.limit, requestParameters.email, requestParameters.remoteDisplayId, requestParameters.expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  This endpoint sets the monthly limit for a user.  The limit amount must be non-negative.  To unset the monthly limit of the user, just set `monthly_limit` to null. 
         * @summary  Set limit for the user 
         * @param {UsersApiSetMonthlyLimitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setMonthlyLimit(requestParameters: UsersApiSetMonthlyLimitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserLimitResponse>> {
            const setUserLimitRequest: SetUserLimitRequest = {
                monthly_limit: requestParameters.monthly_limit
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setMonthlyLimit(requestParameters.id, setUserLimitRequest, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  This endpoint updates a user. Any parameters not provided will be left unchanged. 
         * @summary  Update user 
         * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(requestParameters: UsersApiUpdateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const updateUserRequest: UpdateUserRequest = {
                status: requestParameters.status,
                manager_id: requestParameters.manager_id,
                department_id: requestParameters.department_id,
                location_id: requestParameters.location_id,
                title_id: requestParameters.title_id,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(requestParameters.id, updateUserRequest, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         *  This endpoint returns the user associated with the OAuth2 access token. 
         * @summary  Get current user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: AxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         *  This endpoint gets the monthly limit for the user including the monthly available limit. 
         * @summary  Get limit for the user 
         * @param {UsersApiGetMonthlyLimitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonthlyLimit(requestParameters: UsersApiGetMonthlyLimitRequest, options?: AxiosRequestConfig): AxiosPromise<UserLimitResponse> {
            return localVarFp.getMonthlyLimit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  This endpoint gets a user by ID. 
         * @summary  Get user 
         * @param {UsersApiGetUserByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(requestParameters: UsersApiGetUserByIdRequest, options?: AxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.getUserById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  This endpoint invites a new user as an employee. To update user\'s role, check out [this article](https://support.brex.com/how-do-i-change-another-user-s-role/). 
         * @summary  Invite user 
         * @param {UsersApiInviteNewEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteNewEmployee(requestParameters: UsersApiInviteNewEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.inviteNewEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  This endpoint lists all users. To find a user id by email, you can filter using the `email` query parameter. 
         * @summary  List users 
         * @param {UsersApiListUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(requestParameters: UsersApiListUsersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PageUserResponse> {
            return localVarFp.listUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  This endpoint sets the monthly limit for a user.  The limit amount must be non-negative.  To unset the monthly limit of the user, just set `monthly_limit` to null. 
         * @summary  Set limit for the user 
         * @param {UsersApiSetMonthlyLimitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMonthlyLimit(requestParameters: UsersApiSetMonthlyLimitRequest, options?: AxiosRequestConfig): AxiosPromise<UserLimitResponse> {
            return localVarFp.setMonthlyLimit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  This endpoint updates a user. Any parameters not provided will be left unchanged. 
         * @summary  Update user 
         * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(requestParameters: UsersApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.updateUser(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMonthlyLimit operation in UsersApi.
 * @export
 * @interface UsersApiGetMonthlyLimitRequest
 */
export type UsersApiGetMonthlyLimitRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetMonthlyLimit
    */
    readonly id: string
    
}

/**
 * Request parameters for getUserById operation in UsersApi.
 * @export
 * @interface UsersApiGetUserByIdRequest
 */
export type UsersApiGetUserByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetUserById
    */
    readonly id: string
    
}

/**
 * Request parameters for inviteNewEmployee operation in UsersApi.
 * @export
 * @interface UsersApiInviteNewEmployeeRequest
 */
export type UsersApiInviteNewEmployeeRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiInviteNewEmployee
    */
    readonly idempotencyKey?: string
    
} & CreateUserRequest

/**
 * Request parameters for listUsers operation in UsersApi.
 * @export
 * @interface UsersApiListUsersRequest
 */
export type UsersApiListUsersRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiListUsers
    */
    readonly cursor?: string
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiListUsers
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiListUsers
    */
    readonly email?: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiListUsers
    */
    readonly remoteDisplayId?: string
    
    /**
    * 
    * @type {Array<string>}
    * @memberof UsersApiListUsers
    */
    readonly expand?: Array<string>
    
}

/**
 * Request parameters for setMonthlyLimit operation in UsersApi.
 * @export
 * @interface UsersApiSetMonthlyLimitRequest
 */
export type UsersApiSetMonthlyLimitRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiSetMonthlyLimit
    */
    readonly id: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiSetMonthlyLimit
    */
    readonly idempotencyKey?: string
    
} & SetUserLimitRequest

/**
 * Request parameters for updateUser operation in UsersApi.
 * @export
 * @interface UsersApiUpdateUserRequest
 */
export type UsersApiUpdateUserRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiUpdateUser
    */
    readonly id: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiUpdateUser
    */
    readonly idempotencyKey?: string
    
} & UpdateUserRequest

/**
 * UsersApiGenerated - object-oriented interface
 * @export
 * @class UsersApiGenerated
 * @extends {BaseAPI}
 */
export class UsersApiGenerated extends BaseAPI {
    /**
     *  This endpoint returns the user associated with the OAuth2 access token. 
     * @summary  Get current user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getCurrentUser(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  This endpoint gets the monthly limit for the user including the monthly available limit. 
     * @summary  Get limit for the user 
     * @param {UsersApiGetMonthlyLimitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getMonthlyLimit(requestParameters: UsersApiGetMonthlyLimitRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getMonthlyLimit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  This endpoint gets a user by ID. 
     * @summary  Get user 
     * @param {UsersApiGetUserByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getUserById(requestParameters: UsersApiGetUserByIdRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  This endpoint invites a new user as an employee. To update user\'s role, check out [this article](https://support.brex.com/how-do-i-change-another-user-s-role/). 
     * @summary  Invite user 
     * @param {UsersApiInviteNewEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public inviteNewEmployee(requestParameters: UsersApiInviteNewEmployeeRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).inviteNewEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  This endpoint lists all users. To find a user id by email, you can filter using the `email` query parameter. 
     * @summary  List users 
     * @param {UsersApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public listUsers(requestParameters: UsersApiListUsersRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  This endpoint sets the monthly limit for a user.  The limit amount must be non-negative.  To unset the monthly limit of the user, just set `monthly_limit` to null. 
     * @summary  Set limit for the user 
     * @param {UsersApiSetMonthlyLimitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public setMonthlyLimit(requestParameters: UsersApiSetMonthlyLimitRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).setMonthlyLimit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  This endpoint updates a user. Any parameters not provided will be left unchanged. 
     * @summary  Update user 
     * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public updateUser(requestParameters: UsersApiUpdateUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
